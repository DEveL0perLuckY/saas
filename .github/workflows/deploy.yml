name: SAAS Backend Deployment

on:
  push:
    branches: [main]

env:
  DOCKER_USERNAME: developerlucky
  DOCKER_IMAGE: sass
  FULL_IMAGE_NAME: developerlucky/sass
  EC2_IP: ec2-13-200-29-230.ap-south-1.compute.amazonaws.com
  SSH_USER: ubuntu

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: "21"
          distribution: "temurin"

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t ${{ env.FULL_IMAGE_NAME }}:latest .

      - name: Push Docker image to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ env.DOCKER_USERNAME }}" --password-stdin
          docker push ${{ env.FULL_IMAGE_NAME }}:latest

      - name: Create SSH key file
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/private_key
          chmod 600 /tmp/private_key

      - name: Clean up EC2 instance
        run: |
          ssh -v -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i /tmp/private_key ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install docker.io -y
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            if sudo docker ps -a --format '{{.Names}}' | grep -q saas; then
              echo "Stopping and removing the existing SAAS container..."
              sudo docker stop saas
              sudo docker rm saas
            else
              echo "No existing SAAS container to remove."
            fi

            echo "Pruning unused Docker images..."
            sudo docker system prune -a -f
          EOF

      - name: Deploy to EC2
        run: |
          ssh -v -o StrictHostKeyChecking=no -o IdentitiesOnly=yes -i /tmp/private_key ${{ env.SSH_USER }}@${{ env.EC2_IP }} << 'EOF'
            sudo docker pull ${{ env.FULL_IMAGE_NAME }}:latest

            sudo docker run -d -p 8080:8080 --name saas ${{ env.FULL_IMAGE_NAME }}:latest
          EOF

      - name: Clean up SSH key file
        run: rm /tmp/private_key
